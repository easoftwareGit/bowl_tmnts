generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// notes:
// password is optional because when authenticating via Google, no password is saved in the database
model users {
  // gen_random_uuid(): create the uuid string
  // cast(...) as text: makes sure uuid value is treated as text
  // replace(..., '-', ''): removed the '-' values from the uuid  
  // concat('usr_', ...): adds usr_ to start of uuid (so uuid shows table it is for). 
  // dbgenerated("..."): indicates the code that will be run by the database
  // @default: the default value for the field
  // @id: indicates the field is the primary key
  // @db.Text: tells prisma to map the field as a text field
  id            String   @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  email         String   @unique(map: "users_email_idx") @db.VarChar
  password      String?
  first_name    String   @db.VarChar
  last_name     String   @db.VarChar
  phone         String?  @db.VarChar
  tmnts         tmnts[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model tmnts {
  id         String    @id @default(dbgenerated("concat('tmt_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  user_id    String    @db.Text
  tmnt_name  String    @db.VarChar
  bowl_name  String    @db.VarChar
  city       String    @db.VarChar
  state      String    @db.VarChar
  start_date DateTime  @db.Date
  end_date   DateTime? @db.Date
  events     events[]
  players    players[]
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model events {
  id         String   @id @default(dbgenerated("concat('evt_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  tmnt_id    String   @db.Text
  event_name String   @db.VarChar
  team_size  Int
  games      Int
  divs       divs[]
  tmnts      tmnts    @relation(fields: [tmnt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  squads     squads[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model squads {
  id         String       @id @default(dbgenerated("concat('sqd_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  event_id   String       @db.Text
  squad_name String       @db.VarChar
  date       DateTime     @db.Date
  time       DateTime     @db.Time(6)
  games      Int
  lane_asmts lane_asmts[]
  events     events       @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model divs {
  id        String    @id @default(dbgenerated("concat('div_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  event_id  String    @db.Text
  div_name  String    @db.VarChar
  hdcp      Boolean
  pots      Boolean   @default(true)
  events    events    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  entries   entries[]
  hdcps     hdcps[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model hdcps {
  id        String   @id @default(dbgenerated("concat('hdc_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  div_id    String   @db.Text
  hdcp_per  Float
  hdcp_from Int
  int_hdcp  Boolean
  games     Int
  divs      divs     @relation(fields: [div_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model players {
  id         String       @id @default(dbgenerated("concat('ply_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  tmnt_id    String       @db.Text
  first_name String       @db.VarChar
  last_name  String       @db.VarChar
  average    Int?
  usbc       String?      @db.VarChar
  entries    entries[]
  games      games[]
  lane_asmts lane_asmts[]
  tmnts      tmnts        @relation(fields: [tmnt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model entries {
  id        Int      @id @default(autoincrement())
  player_id String   @db.Text
  div_id    String   @db.Text
  divs      divs     @relation(fields: [div_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players   players  @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([player_id, div_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model games {
  id        Int      @id @default(autoincrement())
  squad_id  String   @db.Text
  player_id String   @db.Text
  game_num  Int
  score     Int
  players   players  @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([squad_id, player_id, game_num])
}

model lane_asmts {
  id        Int      @id @default(autoincrement())
  lane      Int
  player_id String   @db.Text
  squad_id  String   @db.Text
  position  String   @db.VarChar
  players   players  @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  squads    squads   @relation(fields: [squad_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lane, position])
  @@unique([player_id, squad_id])
}
